#!/usr/bin/env python3
"""
Extracts SSH keys from Bitwarden vault
"""

import argparse
import json
import logging
import os
import re
import subprocess
import sys
from typing import Any


def get_session(session: str) -> str:
    """
    Function to return a valid Bitwarden session
    """
    # Check for an existing, user-supplied Bitwarden session
    if not session:
        session = os.environ.get("BW_SESSION", "")
    if session:
        logging.debug("Existing Bitwarden session found")
        return session

    # Check if we're already logged in
    proc_logged = subprocess.run(["bw", "login", "--check", "--quiet"], check=False)

    if proc_logged.returncode:
        logging.debug("Not logged into Bitwarden")
        logging.info("Please login to Bitwarden CLI when prompted")
        operation = "login"
    else:
        logging.debug("Bitwarden vault is locked")
        logging.info("Please unlock your Bitwarden vault when prompted")
        operation = "unlock"

    # Use a more interactive approach
    try:
        # Interactive login that inherits stdin to allow password entry
        logging.info(
            f"Running 'bw {operation}' - you'll need to enter your credentials"
        )
        # This allows the Bitwarden CLI to directly access the terminal
        proc = subprocess.run(
            ["bw", "--raw", operation],
            text=True,
            stdout=subprocess.PIPE,
            check=True,
            stdin=sys.stdin,
        )

        session = proc.stdout.strip()
        if not session:
            raise RuntimeError(f"Failed to get session from 'bw {operation}'")

        logging.info(
            'To re-use this BitWarden session run: export BW_SESSION="%s"',
            session,
        )
        return session
    except subprocess.CalledProcessError as e:
        raise RuntimeError(f"Failed to {operation}: {e}")


def get_folders(session: str, foldername: str) -> str:
    """
    Function to return the ID of the folder that matches the provided name
    """
    logging.debug("Folder name: %s", foldername)

    try:
        proc_folders = subprocess.run(
            ["bw", "list", "folders", "--search", foldername, "--session", session],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            check=True,
        )

        folders = json.loads(proc_folders.stdout)

        try:
            return str([k["id"] for k in folders if k["name"] == foldername][0])
        except IndexError:
            raise RuntimeError(f'Folder "{foldername}" not found')

    except subprocess.CalledProcessError as e:
        raise RuntimeError(
            f"Failed to list folders: {e.stderr if e.stderr else str(e)}"
        )
    except json.JSONDecodeError:
        raise RuntimeError("Failed to parse folders response from Bitwarden")


def folder_items(session: str, folder_id: str) -> list[dict[str, Any]]:
    """
    Function to return items from a folder
    """
    logging.debug("Folder ID: %s", folder_id)

    try:
        proc_items = subprocess.run(
            ["bw", "list", "items", "--folderid", folder_id, "--session", session],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            check=True,
        )

        data: list[dict[str, Any]] = json.loads(proc_items.stdout)
        return data

    except subprocess.CalledProcessError as e:
        raise RuntimeError(f"Failed to list items: {e.stderr if e.stderr else str(e)}")
    except json.JSONDecodeError:
        raise RuntimeError("Failed to parse items response from Bitwarden")


def add_ssh_keys(
    session: str,
    items: list[dict[str, Any]],
    keyname: str,
    pwkeyname: str,
) -> None:
    """
    Function to attempt to get keys from vault items
    """
    added_count = 0
    total_count = len(items)

    for item in items:
        logging.info("----------------------------------")
        logging.info('Processing item "%s"', item["name"])
        try:
            ssh_key = fetch_key(session, item, keyname)

            # Basic validation of SSH key format
            if not is_valid_ssh_key(ssh_key):
                logging.warning(
                    f"The content for {item['name']} doesn't appear to be a valid SSH key"
                )
                continue

            private_key_pw = ""

            if "fields" in item:
                try:
                    private_key_pw = [
                        k["value"] for k in item["fields"] if k["name"] == pwkeyname
                    ][0]
                    logging.debug("Passphrase declared")
                except IndexError:
                    logging.warning(
                        'No "%s" field found for item %s', pwkeyname, item["name"]
                    )

            ssh_add(ssh_key, private_key_pw)
            added_count += 1
            logging.info(f'Successfully added key "{item["name"]}" to SSH agent')

        except RuntimeError as error:
            logging.error(str(error))
        except subprocess.SubprocessError as error:
            stderr_output = getattr(error, "stderr", "")
            if stderr_output:
                logging.error(f'Failed to add key "{item["name"]}": {stderr_output}')
            else:
                logging.error(f'Failed to add key "{item["name"]}" to the SSH agent')

    logging.info(f"Added {added_count} of {total_count} SSH keys to the agent")


def is_valid_ssh_key(key_data: str) -> bool:
    """
    Basic validation for SSH key format
    """
    # Check for common SSH key headers
    return bool(re.search(r"-----BEGIN (\w+) PRIVATE KEY-----", key_data))


def fetch_key(session: str, item: dict[str, Any], keyname: str) -> str:
    """
    Function to fetch SSH key from either attachments or notes
    """
    if "attachments" in item and item.get("attachments"):
        logging.debug(
            "Item %s has attachments - searching for %s",
            item["name"],
            keyname,
        )
        try:
            return fetch_from_attachment(session, item, keyname)
        except RuntimeWarning as warning:
            logging.warning(str(warning))
        except RuntimeError as error:
            logging.error(str(error))

    logging.debug("Checking for SSH key in notes")

    # Check if notes contain a private key
    if isinstance(item["notes"], str) and item["notes"].strip():
        if is_valid_ssh_key(item["notes"]):
            return item["notes"]
        else:
            logging.warning(
                f"Notes for {item['name']} don't appear to contain a valid SSH key"
            )

    raise RuntimeError(f"Could not find a valid SSH key for item {item['name']}")


def fetch_from_attachment(session: str, item: dict[str, Any], keyname: str) -> str:
    """
    Function to get the key contents from the Bitwarden vault attachment
    """
    # Try to find key filename from custom fields
    private_key_file = None
    if "fields" in item:
        try:
            private_key_file = [
                k["value"] for k in item["fields"] if k["name"] == keyname
            ][0]
            logging.debug(
                "Private key file declared in custom field: %s", private_key_file
            )
        except IndexError:
            pass

    # If no custom field, try to find an attachment that looks like a key
    if not private_key_file and "attachments" in item:
        for attachment in item["attachments"]:
            if re.match(r"id_\w+$|id_\w+\.pem$", attachment["fileName"]):
                private_key_file = attachment["fileName"]
                logging.debug("Found likely SSH key attachment: %s", private_key_file)
                break

    if not private_key_file:
        raise RuntimeWarning(
            f'No "{keyname}" field or obvious key attachment found for item {item["name"]}'
        )

    try:
        private_key_id = [
            k["id"] for k in item["attachments"] if k["fileName"] == private_key_file
        ][0]
    except IndexError:
        raise RuntimeWarning(
            f'No attachment called "{private_key_file}" found for item {item["name"]}'
        )

    logging.debug("Private key ID: %s", private_key_id)

    try:
        proc_attachment = subprocess.run(
            [
                "bw",
                "get",
                "attachment",
                private_key_id,
                "--itemid",
                item["id"],
                "--raw",
                "--session",
                session,
            ],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            check=True,
        )
        return proc_attachment.stdout
    except subprocess.CalledProcessError as e:
        raise RuntimeError(
            f"Could not get attachment from Bitwarden: {e.stderr if e.stderr else str(e)}"
        )


def ssh_add(ssh_key: str, key_pw: str = "") -> None:
    """
    Adds the key to the agent
    """
    # Create a temporary file for passphrase
    env_vars = os.environ.copy()

    if key_pw:
        env_vars["SSH_ASKPASS"] = os.path.realpath(__file__)
        env_vars["SSH_KEY_PASSPHRASE"] = key_pw
        env_vars["DISPLAY"] = env_vars.get("DISPLAY", ":0")  # Ensure DISPLAY is set
    else:
        env_vars["SSH_ASKPASS_REQUIRE"] = "never"

    logging.debug("Running ssh-add")

    # Ensure the key ends with a newline
    if not ssh_key.endswith("\n"):
        logging.debug("Adding a line break at the end of the key")
        ssh_key += "\n"

    try:
        # Try to add the key to SSH agent
        proc = subprocess.run(
            ["ssh-add", "-"],
            input=ssh_key.encode("utf-8"),
            env=env_vars,
            check=True,
            stderr=subprocess.PIPE,
            stdout=subprocess.PIPE,
        )
        if proc.stdout:
            logging.debug(
                f"ssh-add output: {proc.stdout.decode('utf-8', errors='replace').strip()}"
            )
    except subprocess.CalledProcessError as e:
        error_msg = e.stderr.decode("utf-8", errors="replace").strip()
        raise subprocess.SubprocessError(f"ssh-add failed: {error_msg}")


def askpass() -> None:
    """
    Implements the SSH_ASKPASS protocol
    """
    print(os.environ.get("SSH_KEY_PASSPHRASE", ""))


if __name__ == "__main__":

    def parse_args() -> argparse.Namespace:
        """
        Function to parse command line arguments
        """
        parser = argparse.ArgumentParser(
            description="Extract SSH keys from Bitwarden and add them to your SSH agent"
        )
        parser.add_argument(
            "-d",
            "--debug",
            action="store_true",
            help="show debug output",
        )
        parser.add_argument(
            "-f",
            "--foldername",
            default="ssh-agent",
            help="folder name to use to search for SSH keys (default: ssh-agent)",
        )
        parser.add_argument(
            "-c",
            "--customfield",
            default="private",
            help="custom field name where private key filename is stored (default: private)",
        )
        parser.add_argument(
            "-p",
            "--passphrasefield",
            default="passphrase",
            help="custom field name where key passphrase is stored (default: passphrase)",
        )
        parser.add_argument(
            "-s",
            "--session",
            default="",
            help="session key for Bitwarden (optional)",
        )

        return parser.parse_args()

    def main() -> None:
        """
        Main program logic
        """
        args = parse_args()

        if args.debug:
            loglevel = logging.DEBUG
        else:
            loglevel = logging.INFO

        logging.basicConfig(format="%(levelname)-8s %(message)s", level=loglevel)

        try:
            logging.info("Getting Bitwarden session")
            session = get_session(args.session)
            logging.debug("Session obtained successfully")

            logging.info("Getting folder list")
            folder_id = get_folders(session, args.foldername)

            logging.info("Getting folder items")
            items = folder_items(session, folder_id)

            if not items:
                logging.warning(f"No items found in folder '{args.foldername}'")
                return

            logging.info(f"Found {len(items)} items in folder '{args.foldername}'")
            logging.info("Attempting to add keys to ssh-agent")
            add_ssh_keys(session, items, args.customfield, args.passphrasefield)

        except RuntimeError as error:
            logging.critical(str(error))
        except subprocess.CalledProcessError as error:
            stderr = (
                error.stderr.decode("utf-8")
                if hasattr(error, "stderr") and error.stderr
                else ""
            )
            logging.critical(
                '"%s" error: %s',
                error.cmd[0] if hasattr(error, "cmd") else "Command",
                stderr or str(error),
            )
            logging.debug(
                "Error running %s", getattr(error, "cmd", "(unknown command)")
            )
        except Exception as error:
            logging.critical(f"Unexpected error: {error}")

    if os.environ.get("SSH_ASKPASS") == os.path.realpath(__file__):
        askpass()
    else:
        main()
